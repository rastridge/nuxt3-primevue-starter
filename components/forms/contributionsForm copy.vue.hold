<template>
	<div class="form-box">
		state = {{ state }}
		<h5 class="text-left">
			<!-- Contributor {{ contribution_data.contribution_name }} -->
		</h5>

		<FormKit
			type="form"
			id="myForm"
			:config="{ validationVisibility: 'live' }"
			v-model="state"
			submit-label="Submit"
			@submit="submitForm"
		>
			<FormKit
				type="datetime-local"
				label="Contribution Date"
				name="contribution_date"
				validation="required"
			/>

			<FormKit
				label="Amount"
				name="contribution_amount"
				type="text"
				validation="required"
			/>
			<FormKit type="checkbox" label="Show Name" name="contribution_showName" />
			<pre wrap> state= {{ state }}</pre>

			<FormKit
				type="checkbox"
				label="Show Amount"
				name="contribution_showAmount"
			/>

			<FormKit
				type="textarea"
				label="Comment"
				name="contribution_comment"
				validation="required"
			/>
		</FormKit>
		<Button @click="cancelForm()"> Cancel </Button>
	</div>
	<!-- </div> -->
</template>

<script setup>
	import '@formkit/themes/genesis'
	import { getNode } from '@formkit/core'

	import { useAuthStore } from '~/stores/authStore'
	const auth = useAuthStore()

	const { $dayjs } = useNuxtApp()
	//
	// Outgoing
	//
	const emit = defineEmits(['submitted'])
	//
	// Incoming
	//
	const props = defineProps({
		id: { Number, default: 0 },
	})

	//
	// Initialize form sub function
	//
	const populateForm = async () => {
		const {
			data: contribution_data,
			pending,
			error,
			refresh,
		} = await useFetch(`/contributions/${props.id}`, {
			key: props.id,
			method: 'get',
			headers: {
				authorization: auth.user.token,
			},
		})
		// // Adjust for local time and Format for Formkit calendar
		contribution_data.value.contribution_date = $dayjs(
			contribution_data.value.contribution_date
		).format('YYYY-MM-DD HH:mm')
		// Set inpput values
		getNode('myForm').input(contribution_data.value)
	}

	//
	// Initialize form for add
	//
	let state = ref({})
	const dt = $dayjs()
	state.value.contribution_date = dt.format('YYYY-MM-DD HH:mm')

	//
	// edit if there is an id - add if not
	//
	if (props.id !== 0) {
		populateForm()
	}

	//
	// form handlers
	//
	const submitForm = (state) => {
		emit('submitted', state)
	}

	const cancelForm = () => {
		navigateTo('/admin/contributions') // needs to be / for self register
	}
</script>
